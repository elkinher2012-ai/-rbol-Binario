# üå≥ √Årbol Binario en Java

## üß† ¬øQu√© es un √Årbol Binario?

Un **√°rbol binario** es una estructura de datos donde cada elemento (llamado **nodo**) puede tener **hasta dos hijos**: uno a la izquierda y otro a la derecha.  
Sirve para **organizar informaci√≥n** de forma jer√°rquica, lo que permite buscar, insertar y recorrer datos de manera eficiente.

En un **√°rbol binario de b√∫squeda**, los valores **menores** se guardan a la **izquierda** y los **mayores** a la **derecha**.

Ejemplo visual:

```
      8
     / \
    3   10
   / \
  1   6
```

---

## ‚öôÔ∏è ¬øC√≥mo se implement√≥?

Este programa en **Java** construye un **√°rbol binario de b√∫squeda simple** usando tres clases en un √∫nico archivo `Main.java`:

- **Nodo** ‚Üí Representa un n√∫mero dentro del √°rbol.  
- **ArbolBinario** ‚Üí Contiene los m√©todos para:
  - Insertar nuevos n√∫meros.
  - Mostrar los datos en orden ascendente (recorrido inorden).
  - Buscar un n√∫mero dentro del √°rbol.
- **Main** ‚Üí Muestra un **men√∫ interactivo en consola** para que el usuario elija qu√© hacer.

El recorrido **inorden** se usa porque muestra los valores **ordenados de menor a mayor**.

---

## üíª C√≥digo (Main.java)

Copia todo esto en un archivo llamado `Main.java` y comp√≠lalo con `javac Main.java`.

```java
import java.util.Scanner;

// Clase Nodo del √°rbol
class Nodo {
    int valor;
    Nodo izquierda, derecha;

    public Nodo(int valor) {
        this.valor = valor;
        izquierda = derecha = null;
    }
}

// Clase √Årbol Binario
class ArbolBinario {
    Nodo raiz;

    // Insertar un valor en el √°rbol
    public void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }

    private Nodo insertarRec(Nodo nodo, int valor) {
        if (nodo == null) {
            nodo = new Nodo(valor);
            return nodo;
        }
        if (valor < nodo.valor) {
            nodo.izquierda = insertarRec(nodo.izquierda, valor);
        } else if (valor > nodo.valor) {
            nodo.derecha = insertarRec(nodo.derecha, valor);
        } // si es igual, no lo inserta (para evitar duplicados)
        return nodo;
    }

    // Mostrar recorrido inorden
    public void mostrarInorden() {
        System.out.print("Recorrido inorden: ");
        inordenRec(raiz);
        System.out.println();
    }

    private void inordenRec(Nodo nodo) {
        if (nodo != null) {
            inordenRec(nodo.izquierda);
            System.out.print(nodo.valor + " ");
            inordenRec(nodo.derecha);
        }
    }

    // Buscar un valor en el √°rbol
    public boolean buscar(int valor) {
        return buscarRec(raiz, valor);
    }

    private boolean buscarRec(Nodo nodo, int valor) {
        if (nodo == null)
            return false;
        if (nodo.valor == valor)
            return true;
        if (valor < nodo.valor)
            return buscarRec(nodo.izquierda, valor);
        else
            return buscarRec(nodo.derecha, valor);
    }
}

// Clase principal con el men√∫
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol = new ArbolBinario();
        int opcion = 0, numero;

        do {
            System.out.println("\n=== MEN√ö √ÅRBOL BINARIO ===");
            System.out.println("1. Insertar n√∫mero");
            System.out.println("2. Mostrar recorrido inorden");
            System.out.println("3. Buscar n√∫mero");
            System.out.println("4. Salir");
            System.out.print("Seleccione una opci√≥n: ");
            if (!sc.hasNextInt()) {
                sc.next(); // limpiar entrada inv√°lida
                System.out.println("Entrada no v√°lida. Intente con un n√∫mero.");
                continue;
            }
            opcion = sc.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Ingrese el n√∫mero a insertar: ");
                    if (sc.hasNextInt()) {
                        numero = sc.nextInt();
                        arbol.insertar(numero);
                        System.out.println("N√∫mero insertado correctamente.");
                    } else {
                        sc.next();
                        System.out.println("Entrada no v√°lida. Debe ingresar un n√∫mero entero.");
                    }
                    break;

                case 2:
                    arbol.mostrarInorden();
                    break;

                case 3:
                    System.out.print("Ingrese el n√∫mero a buscar: ");
                    if (sc.hasNextInt()) {
                        numero = sc.nextInt();
                        if (arbol.buscar(numero)) {
                            System.out.println("‚úÖ El n√∫mero " + numero + " S√ç existe en el √°rbol.");
                        } else {
                            System.out.println("‚ùå El n√∫mero " + numero + " NO existe en el √°rbol.");
                        }
                    } else {
                        sc.next();
                        System.out.println("Entrada no v√°lida. Debe ingresar un n√∫mero entero.");
                    }
                    break;

                case 4:
                    System.out.println("Saliendo del programa...");
                    break;

                default:
                    System.out.println("Opci√≥n no v√°lida. Intente nuevamente.");
            }

        } while (opcion != 4);

        sc.close();
    }
}
```

---

## üíª Ejemplo de ejecuci√≥n en consola

### üìã Men√∫ principal
```
=== MEN√ö √ÅRBOL BINARIO ===
1. Insertar n√∫mero
2. Mostrar recorrido inorden
3. Buscar n√∫mero
4. Salir
```
![Ejecuci√≥n del men√∫](img/ejecucion_menu.png)

### üå± Insertar n√∫meros
```
Ingrese el n√∫mero a insertar: 8
N√∫mero insertado correctamente.

Ingrese el n√∫mero a insertar: 3
N√∫mero insertado correctamente.

Ingrese el n√∫mero a insertar: 10
N√∫mero insertado correctamente.
```
![Inserci√≥n de n√∫meros](img/ejecucion_insertar.png)

### üî¢ Mostrar recorrido inorden
```
Recorrido inorden: 3 8 10
```
![Recorrido inorden](img/ejecucion_inorden.png)

### üîç Buscar n√∫mero
```
Ingrese el n√∫mero a buscar: 10
‚úÖ El n√∫mero 10 S√ç existe en el √°rbol.
```
![B√∫squeda de n√∫mero](img/ejecucion_buscar.png)

---
---------------------------------------------------------------
import java.util.Scanner;

// Clase Nodo del √°rbol
class Nodo {
    int valor;
    Nodo izquierda, derecha;

    public Nodo(int valor) {
        this.valor = valor;
        izquierda = derecha = null;
    }
}

// Clase √Årbol Binario
class ArbolBinario {
    Nodo raiz;

    // Insertar un valor en el √°rbol
    public void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }

    private Nodo insertarRec(Nodo nodo, int valor) {
        if (nodo == null) {
            nodo = new Nodo(valor);
            return nodo;
        }
        if (valor < nodo.valor) {
            nodo.izquierda = insertarRec(nodo.izquierda, valor);
        } else if (valor > nodo.valor) {
            nodo.derecha = insertarRec(nodo.derecha, valor);
        } // si es igual, no lo inserta (para evitar duplicados)
        return nodo;
    }

    // Mostrar recorrido inorden
    public void mostrarInorden() {
        System.out.print("Recorrido inorden: ");
        inordenRec(raiz);
        System.out.println();
    }

    private void inordenRec(Nodo nodo) {
        if (nodo != null) {
            inordenRec(nodo.izquierda);
            System.out.print(nodo.valor + " ");
            inordenRec(nodo.derecha);
        }
    }

    // Buscar un valor en el √°rbol
    public boolean buscar(int valor) {
        return buscarRec(raiz, valor);
    }

    private boolean buscarRec(Nodo nodo, int valor) {
        if (nodo == null)
            return false;
        if (nodo.valor == valor)
            return true;
        if (valor < nodo.valor)
            return buscarRec(nodo.izquierda, valor);
        else
            return buscarRec(nodo.derecha, valor);
    }
}

// Clase principal con el men√∫
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArbolBinario arbol = new ArbolBinario();
        int opcion, numero;

        do {
            System.out.println("\n=== MEN√ö √ÅRBOL BINARIO ===");
            System.out.println("1. Insertar n√∫mero");
            System.out.println("2. Mostrar recorrido inorden");
            System.out.println("3. Buscar n√∫mero");
            System.out.println("4. Salir");
            System.out.print("Seleccione una opci√≥n: ");
            opcion = sc.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Ingrese el n√∫mero a insertar: ");
                    numero = sc.nextInt();
                    arbol.insertar(numero);
                    System.out.println("N√∫mero insertado correctamente.");
                    break;

                case 2:
                    arbol.mostrarInorden();
                    break;

                case 3:
                    System.out.print("Ingrese el n√∫mero a buscar: ");
                    numero = sc.nextInt();
                    if (arbol.buscar(numero)) {
                        System.out.println("‚úÖ El n√∫mero " + numero + " S√ç existe en el √°rbol.");
                    } else {
                        System.out.println("‚ùå El n√∫mero " + numero + " NO existe en el √°rbol.");
                    }
                    break;

                case 4:
                    System.out.println("Saliendo del programa...");
                    break;

                default:
                    System.out.println("Opci√≥n no v√°lida. Intente nuevamente.");
            }

        } while (opcion != 4);

        sc.close();
    }
}
